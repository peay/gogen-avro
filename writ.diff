diff --git a/container/writer.go b/container/writer.go
index a6a925a..c64e102 100644
--- a/container/writer.go
+++ b/container/writer.go
@@ -4,8 +4,9 @@ package container
 import (
 	"bytes"
 	"compress/flate"
-	"github.com/peay/gogen-avro/container/avro"
 	"io"
+
+	"github.com/peay/gogen-avro/container/avro"
 )
 
 /*
@@ -45,8 +46,10 @@ type Writer struct {
   Create a new Writer wrapping the provided io.Writer with the given Codec and number of records per block.
   The Writer will lazily write the container file header when WriteRecord is called the first time.
   You must call Flush on the Writer before closing the underlying io.Writer, to ensure the final block is written.
+  Optionally, pass in a schema string to ensure that the header is written even if no records are written. This
+  is required to produce valid empty Avro container files.
 */
-func NewWriter(writer io.Writer, codec Codec, recordsPerBlock int64) (*Writer, error) {
+func NewWriter(writer io.Writer, codec Codec, recordsPerBlock int64, schema ...string) (*Writer, error) {
 	blockBytes := make([]byte, 0)
 	blockBuffer := bytes.NewBuffer(blockBytes)
 
@@ -70,6 +73,14 @@ func NewWriter(writer io.Writer, codec Codec, recordsPerBlock int64) (*Writer, e
 		avroWriter.compressedWriter = avroWriter.blockBuffer
 	}
 
+	if len(schema) == 1 {
+		avroWriter.headerWritten = true
+		err = avroWriter.writeHeader(schema[1])
+		if err != nil {
+			return nil, err
+		}
+	}
+
 	return avroWriter, nil
 }
 
